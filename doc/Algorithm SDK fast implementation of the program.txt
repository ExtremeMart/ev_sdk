算法sdk快速实现方案

part 1. 商务合作部分
合作协议（运营完善）

part 2.开发部分
2.1.前提
	docker镜像
		每个docker镜像的详细信息
	确认算法属性
		例如cpu或gpu、授权方式、检测器单例或多例、检测器是否是连续、算法输出信息等
	算法管理
		至少应提供算法工单、算法报表等功能

2.2.ev_sdk
确认算法属性后，自动提供对应docker镜像
生成docker容器后，提供开发目录"/usr/local/ev_sdk"
    /usr/local/ev_sdk
    ├── README.md       # 帮助文档
    ├── bin             # 运行目录
    ├── data            # 测试数据目录
    ├── lib             # 库文件目录
    ├── include         # 头文件目录
    ├── model           # 模型及模型数据
    ├── doc             # 文档目录，包括part4,5部分的文档均可放在此处
	├── 3rd             # 第三方源码或库目录，包括cJSON,license
	├── src             # libji.so源码目录
        ├── Makefile        # 编译成功后，会自动拷贝至{lib}目录
        ├── ji.cpp          # libji.so实现示例[有开发者完善]
        ├── ...           
    ├── test            # 测试源码目录
        ├── Makefile        # 编译成功后，会自动拷贝至{bin}目录
        ├── test.cpp        # libji.so测试实现
        ├── ...           
    ├── oneKeyTest.sh   # 一键完成编译、测试脚本[待实现]
    ├── clearSrcCode.sh # 开发完成后但在发布前，用于清除开发者源码等[有开发者完善]
	
备注
运行{oneKeyTest.sh}成功后，再运行{clearSrcCode.sh},即可打包算法镜像。

2.3.demo
2.3.1 sdk开发环境验证
详见源码测试目录

2.3.2 功能测试
详见源码测试目录

2.3.3 精确度及性能测试（二期）
详见源码测试目录

2.4.发布算法镜像
2.4.1.备份ev_sdk目录
2.4.2.oneKeyTest.sh + clearSrcCode
2.4.3.生成docker镜像并提交

part 3. SDK快速开发指引（例如10分钟快速入门）
3.1.确认合作协议
3.2.确认算法属性
3.3.确认开发环境
3.4.编写ev_sdk
3.5.测试ev_sdk
3.6.发布ev_sdk,其中3.3、3.4、3.5、3.6属开发部分

part 4.docker快速入门指引（例如5分钟快速入门）
4.1.docker背景
4.2.docker安装及使用
4.3.docker常见问题（FAQ）

备注
方案中开发部分的第2.2、2.3有c++小组完善。
